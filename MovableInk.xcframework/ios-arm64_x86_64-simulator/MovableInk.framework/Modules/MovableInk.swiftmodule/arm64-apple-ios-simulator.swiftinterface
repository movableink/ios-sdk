// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 5.9.2 (swiftlang-5.9.2.2.56 clang-1500.1.0.2.5)
// swift-module-flags: -target arm64-apple-ios13.0-simulator -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -module-name MovableInk
// swift-module-flags-ignorable: -enable-bare-slash-regex
import Combine
import CoreData
import Foundation
import Swift
import SwiftUI
import UIKit
import UniformTypeIdentifiers
import WebKit
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
import os
@objc @objcMembers public class ProductSearchedProperties : ObjectiveC.NSObject, Swift.Encodable {
  @objc final public let query: Swift.String
  @objc final public let url: Foundation.URL?
  @objc public init(query: Swift.String, url: Foundation.URL? = nil)
  @objc public init?(dict: [Swift.String : Any])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public enum DeeplinkResolutionError : Swift.Error {
  case failure(url: Swift.String, message: Swift.String)
  case unknown
}
@objc @_inheritsConvenienceInitializers @_hasMissingDesignatedInitializers @objcMembers public class MIClient : ObjectiveC.NSObject {
  public static var enabledLogTypes: MovableInk.MILogType {
    get
    set
  }
  @objc public static var storedDeeplink: Swift.String? {
    @objc get
  }
  public static var storedDeeplinkSubject: Combine.CurrentValueSubject<Swift.String?, Swift.Never>
  public static func start(apiKey: Swift.String? = nil, deeplinkDomains: [Swift.String] = [], launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]? = nil, shouldRegisterForBehaviorEvents: Swift.Bool = true, deeplinkHandler: @escaping (Swift.Result<Swift.String, MovableInk.DeeplinkResolutionError>) -> Swift.Void)
  @objc public static func start(apiKey: Swift.String? = nil, deeplinkDomains: [Swift.String] = [], launchOptions: [UIKit.UIApplication.LaunchOptionsKey : Any]? = nil, result: @escaping (Swift.String?, Foundation.NSError?) -> Swift.Void)
  @objc deinit
}
extension MovableInk.MIClient {
  @objc public static func checkPasteboardOnInstall()
  #if compiler(>=5.3) && $AsyncAwait
  @objc public static func checkPasteboardOnInstall() async -> Foundation.URL?
  #endif
  @objc @available(iOS 16, *)
  public static func paste(itemProviders: [Foundation.NSItemProvider])
  #if compiler(>=5.3) && $AsyncAwait
  @objc @available(iOS 16, *)
  @_Concurrency.MainActor public static func paste(itemProviders: [Foundation.NSItemProvider]) async -> Swift.Bool
  #endif
  @objc public static func addHandleablePaths(_ options: [Swift.String : [Swift.String]])
  @objc public static func removeHandleablePaths(for domain: Swift.String)
  @objc public static func clearHandleablePaths()
  @objc public static func registerDeeplinkDomains(_ domains: [Swift.String])
  @objc public static func canHandleURL(_ url: Foundation.URL) -> Swift.Bool
  @objc @discardableResult
  public static func handleUniversalLink(with options: UIKit.UIScene.ConnectionOptions) -> Swift.Bool
  @objc @discardableResult
  public static func handleUniversalLink(from userActivity: Foundation.NSUserActivity) -> Swift.Bool
  @objc @discardableResult
  public static func handleUniversalLink(url: Foundation.URL) -> Swift.Bool
  #if compiler(>=5.3) && $AsyncAwait
  @objc public static func resolve(url: Foundation.URL) async throws -> Foundation.URL
  #endif
  public static func resolve(url: Foundation.URL, completion: @escaping (Swift.Result<Foundation.URL, MovableInk.DeeplinkResolutionError>) -> Swift.Void)
}
extension MovableInk.MIClient {
  @objc public static func showInAppMessage(with link: Any, hideCloseButton: Swift.Bool = false, handler: @escaping (Swift.String) -> Swift.Void)
}
extension MovableInk.MIClient {
  @objc public static func miU() -> Swift.String?
  @objc public static func setMIU(_ value: Swift.String)
}
@objc @objcMembers public class ProductCategory : ObjectiveC.NSObject, Swift.Encodable {
  @objc final public let id: Swift.String
  @objc final public let title: Swift.String?
  @objc final public let url: Foundation.URL?
  @objc public init(id: Swift.String, title: Swift.String? = nil, url: Foundation.URL? = nil)
  @objc public init?(dict: [Swift.String : Any])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
public struct MILogType : Swift.OptionSet {
  public let rawValue: Swift.Int
  public init(rawValue: Swift.Int)
  public static let deeplink: MovableInk.MILogType
  public static let behaviorEvent: MovableInk.MILogType
  public static let none: MovableInk.MILogType
  public static let all: MovableInk.MILogType
  public typealias ArrayLiteralElement = MovableInk.MILogType
  public typealias Element = MovableInk.MILogType
  public typealias RawValue = Swift.Int
}
@objc @objcMembers public class ProductProperties : ObjectiveC.NSObject, Swift.Encodable {
  @objc final public let id: Swift.String
  @objc final public let title: Swift.String?
  @objc final public let price: Swift.String?
  @objc final public let url: Foundation.URL?
  @objc final public let categories: [MovableInk.ProductCategory]?
  @objc final public let meta: [Swift.String : Any]?
  @objc(initWithId:title:stringPrice:url:categories:meta:) public init(id: Swift.String, title: Swift.String? = nil, price: Swift.String? = nil, url: Foundation.URL? = nil, categories: [MovableInk.ProductCategory]? = nil, meta: [Swift.String : Any]? = nil)
  @objc(initWithId:title:floatPrice:url:categories:meta:) public init(id: Swift.String, title: Swift.String? = nil, price: Swift.Float, url: Foundation.URL? = nil, categories: [MovableInk.ProductCategory]? = nil, meta: [Swift.String : Any]? = nil)
  @objc(initWithId:title:doublePrice:url:categories:meta:) public init(id: Swift.String, title: Swift.String? = nil, price: Swift.Double, url: Foundation.URL? = nil, categories: [MovableInk.ProductCategory]? = nil, meta: [Swift.String : Any]? = nil)
  @objc(initWithId:title:intPrice:url:categories:meta:) public init(id: Swift.String, title: Swift.String? = nil, price: Swift.Int, url: Foundation.URL? = nil, categories: [MovableInk.ProductCategory]? = nil, meta: [Swift.String : Any]? = nil)
  @objc(initWithId:title:decimalPrice:url:categories:meta:) public init(id: Swift.String, title: Swift.String? = nil, price: Foundation.Decimal, url: Foundation.URL? = nil, categories: [MovableInk.ProductCategory]? = nil, meta: [Swift.String : Any]? = nil)
  @objc public init?(dict: [Swift.String : Any])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
extension MovableInk.MIClient {
  @objc public static func productViewed(_ dict: [Swift.String : Any])
  @objc public static func productViewed(properties: MovableInk.ProductProperties)
  @objc public static func productAdded(_ dict: [Swift.String : Any])
  @objc public static func productAdded(properties: MovableInk.ProductProperties)
  @objc public static func productRemoved(_ dict: [Swift.String : Any])
  @objc public static func productRemoved(properties: MovableInk.ProductProperties)
  @objc public static func orderCompleted(_ dict: [Swift.String : Any])
  @objc public static func orderCompleted(properties: MovableInk.OrderCompletedProperties)
  @objc public static func categoryViewed(_ dict: [Swift.String : Any])
  @objc public static func categoryViewed(category: MovableInk.ProductCategory)
  @objc public static func productSearched(_ dict: [Swift.String : Any])
  @objc public static func productSearched(properties: MovableInk.ProductSearchedProperties)
  @objc public static func identifyUser(_ id: Swift.String)
  @objc public static func identifyUser()
  @objc public static func logEvent(name: Swift.String, properties: [Swift.String : Any])
}
@objc @objcMembers public class OrderCompletedProperties : ObjectiveC.NSObject, Swift.Encodable {
  @objc final public let id: Swift.String?
  @objc final public let revenue: Swift.String?
  @objc final public let products: [MovableInk.OrderCompletedProduct]
  @objc(initWithId:stringRevenue:products:) public init(id: Swift.String? = nil, revenue: Swift.String? = nil, products: [MovableInk.OrderCompletedProduct])
  @objc(initWithId:floatRevenue:products:) public init(id: Swift.String? = nil, revenue: Swift.Float, products: [MovableInk.OrderCompletedProduct])
  @objc(initWithId:doubleRevenue:products:) public init(id: Swift.String? = nil, revenue: Swift.Double, products: [MovableInk.OrderCompletedProduct])
  @objc(initWithId:intRevenue:products:) public init(id: Swift.String? = nil, revenue: Swift.Int, products: [MovableInk.OrderCompletedProduct])
  @objc(initWithId:decimalRevenue:products:) public init(id: Swift.String? = nil, revenue: Foundation.Decimal, products: [MovableInk.OrderCompletedProduct])
  @objc public init?(dict: [Swift.String : Any])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
@objc @objcMembers public class OrderCompletedProduct : ObjectiveC.NSObject, Swift.Encodable {
  @objc final public let id: Swift.String
  @objc final public let title: Swift.String?
  @objc final public let url: Foundation.URL?
  @objc final public let price: Swift.String?
  final public let quantity: Swift.Int?
  @objc public init(id: Swift.String, title: Swift.String? = nil, price: Foundation.Decimal, url: Foundation.URL? = nil, quantity: Swift.Int)
  public init(id: Swift.String, title: Swift.String? = nil, price: Swift.Float, url: Foundation.URL? = nil, quantity: Swift.Int? = nil)
  public init(id: Swift.String, title: Swift.String? = nil, price: Swift.Double, url: Foundation.URL? = nil, quantity: Swift.Int? = nil)
  public init(id: Swift.String, title: Swift.String? = nil, price: Swift.Int, url: Foundation.URL? = nil, quantity: Swift.Int? = nil)
  public init(id: Swift.String, title: Swift.String? = nil, price: Swift.String? = nil, url: Foundation.URL? = nil, quantity: Swift.Int?)
  @objc public init?(dict: [Swift.String : Any])
  @objc deinit
  public func encode(to encoder: any Swift.Encoder) throws
}
